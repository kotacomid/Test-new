<?php
/**
 * Landing page generator logic for DLPG.
 */
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

class DLPG_Generator {

    /**
     * Constructor, register shortcode.
     */
    public function __construct() {
        add_shortcode( 'dlpg_show', [ $this, 'shortcode_display' ] );
    }

    /**
     * Generate a new landing page.
     *
     * @param array $data Associative array of page data from the form.
     * @return int         The new page ID.
     */
    public static function generate_page( array $data ) {
        // Insert WordPress page.
        $page_id = wp_insert_post( [
            'post_title'   => $data['title'],
            'post_status'  => 'publish', // Could be 'draft' based on your preference.
            'post_type'    => 'page',
            'post_content' => __( 'Generated by Dynamic Landing Page Generator', 'dlpg' ),
        ] );

        if ( ! $page_id || is_wp_error( $page_id ) ) {
            return 0;
        }

        // Apply builder template.
        if ( 'elementor' === $data['builder'] && class_exists( '\\Elementor\\Plugin' ) ) {
            self::apply_elementor_template( $page_id, $data );
        } elseif ( 'greenshift' === $data['builder'] && defined( 'GSPB_PLUGIN_DIR' ) ) {
            self::apply_greenshift_template( $page_id, $data );
        }

        // Set featured image if provided.
        if ( isset( $data['hero_image_id'] ) ) {
            set_post_thumbnail( $page_id, $data['hero_image_id'] );
        }

        return $page_id;
    }

    /**
     * Apply Elementor JSON template to page meta.
     *
     * @param int   $page_id Page ID.
     * @param array $d       Data array.
     */
    private static function apply_elementor_template( int $page_id, array $d ) {
        $template_file = DLPG_PLUGIN_PATH . 'includes/templates/elementor-default.json';
        if ( ! file_exists( $template_file ) ) {
            return;
        }

        $json = file_get_contents( $template_file );

        // Replace placeholders.
        $replacements = [
            '{{headline}}'    => $d['headline'],
            '{{description}}' => $d['description'],
            '{{cta_text}}'    => $d['cta_text'],
            '{{cta_link}}'    => $d['cta_link'],
        ];

        $json = str_replace( array_keys( $replacements ), array_values( $replacements ), $json );
        $data_arr = json_decode( $json, true );
        if ( ! $data_arr ) {
            return;
        }

        // Save Elementor builder data.
        update_post_meta( $page_id, '_elementor_data', wp_slash( wp_json_encode( $data_arr ) ) );
        update_post_meta( $page_id, '_elementor_edit_mode', 'builder' );
        update_post_meta( $page_id, '_elementor_template_type', 'page' );
        update_post_meta( $page_id, '_elementor_version', ELEMENTOR_VERSION );
    }

    /**
     * Apply Greenshift (Gutenberg) HTML block markup to page content.
     *
     * @param int   $page_id Page ID.
     * @param array $d       Data array.
     */
    private static function apply_greenshift_template( int $page_id, array $d ) {
        $template_file = DLPG_PLUGIN_PATH . 'includes/templates/greenshift-default.html';
        if ( ! file_exists( $template_file ) ) {
            return;
        }

        $markup = file_get_contents( $template_file );

        // Replace placeholders.
        $replacements = [
            '{{headline}}'    => esc_html( $d['headline'] ),
            '{{description}}' => wp_kses_post( $d['description'] ),
            '{{cta_text}}'    => esc_html( $d['cta_text'] ),
            '{{cta_link}}'    => esc_url( $d['cta_link'] ),
        ];

        $markup = str_replace( array_keys( $replacements ), array_values( $replacements ), $markup );

        // Handle hero image replacement if available.
        if ( isset( $d['hero_image_id'] ) ) {
            $image_url = wp_get_attachment_image_url( $d['hero_image_id'], 'full' );
            if ( $image_url ) {
                $markup = str_replace( '{{hero_image}}', esc_url( $image_url ), $markup );
            }
        }

        // Update page content.
        wp_update_post( [
            'ID'           => $page_id,
            'post_content' => $markup,
        ] );
    }

    /**
     * Shortcode handler to embed generated landing page content.
     * Usage: [dlpg_show id="123"].
     *
     * @param array $atts Shortcode attributes.
     * @return string     Rendered HTML.
     */
    public function shortcode_display( $atts ) {
        $atts = shortcode_atts( [ 'id' => 0 ], $atts, 'dlpg_show' );
        $page = get_post( (int) $atts['id'] );
        if ( ! $page ) {
            return '';
        }
        return apply_filters( 'the_content', $page->post_content );
    }
}